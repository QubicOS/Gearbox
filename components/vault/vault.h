#pragma once

#include <stddef.h>
#include <stdint.h>
#include "esp_err.h"

#ifdef __cplusplus
extern "C" {
#endif

/** 
 * –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–ª—é—á—É 
 */
typedef enum {
    VAULT_PERM_READ  = 1 << 0,
    VAULT_PERM_WRITE = 1 << 1,
} vault_perm_t;

/**
 * –ú–µ—Ç—Ä–∏–∫–∞ Vault
 */
typedef struct {
    size_t temp_count;
    size_t persist_count;
    size_t temp_bytes;
    size_t persist_bytes;
} vault_metrics_t;

/**
 * Callback –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
 */
typedef void (*vault_async_cb_t)(esp_err_t err, const char *key, void *ctx);

/**
 * @brief –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Vault.  
 *   - –°–æ–∑–¥–∞—ë—Ç mutex  
 *   - –ú–æ–Ω—Ç–∏—Ä—É–µ—Ç VFS, —Å–æ–∑–¥–∞—ë—Ç /vault/ –∏ /vault/wal/  
 *   - –ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–∞—Å—Ç–µ—Ä-–∫–ª—é—á –∏–∑ NVS –∏–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π  
 */
esp_err_t vault_init(void);

/** –î–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è (–æ—á–∏—Å—Ç–∫–∞ RAM-—Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤ –∑–∞–¥–∞—á) */
void vault_deinit(void);

/** üåê ACL: –≤—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ –∫–ª—é—á –¥–ª—è –º–æ–¥—É–ª—è (id —Å—Ç—Ä–æ–∫–∏) */
esp_err_t vault_set_acl(const char *key, const char *module_id, vault_perm_t perms);

/** –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–æ */
bool      vault_check_acl(const char *key, const char *module_id, vault_perm_t perm);

/** üîë –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å/–ø–æ–ª—É—á–∏—Ç—å –º–∞—Å—Ç–µ—Ä-–∫–ª—é—á AES-GCM (32 –±–∞–π—Ç–∞) */
esp_err_t vault_set_master_key(const uint8_t key[32]);
esp_err_t vault_get_master_key(uint8_t out_key[32]);

/**  
 * 1Ô∏è‚É£ –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (—à–∏—Ñ—Ä—É–µ—Ç—Å—è –≤ RAM)  
 */
esp_err_t vault_set_temporary(const char *key, const void *data, size_t size, uint32_t ttl_ms);
esp_err_t vault_get_temporary(const char *key, void *buf, size_t buf_size, size_t *out_size);
esp_err_t vault_erase_temporary(const char *key);

/**  
 * 2Ô∏è‚É£ –ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (VFS + WAL + —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ)  
 */
esp_err_t vault_set_persistent(const char *key, const void *data, size_t size);
esp_err_t vault_get_persistent(const char *key, void *buf, size_t buf_size, size_t *out_size);
esp_err_t vault_erase_persistent(const char *key);

/**  
 * 3Ô∏è‚É£ TTL-—Ñ—É–Ω–∫—Ü–∏–∏  
 */
esp_err_t vault_get_temporary_ttl(const char *key, int64_t *remaining_ms);

/**  
 * 4Ô∏è‚É£ –í–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ  
 */
esp_err_t vault_get_version(const char *key, uint32_t *version);
esp_err_t vault_rollback(const char *key, uint32_t target_version);

/**  
 * 5Ô∏è‚É£ –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–π  
 */
esp_err_t vault_list_temp_keys(char ***keys, size_t *count);
esp_err_t vault_list_persistent_keys(char ***keys, size_t *count);

/**  
 * 6Ô∏è‚É£ –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ  
 *    ‚Äì –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞—é—Ç—Å—è
 *    ‚Äì –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö —Ñ–ª–∞–≥ secure = true
 */
esp_err_t vault_erase_persistent_secure(const char *key);

/**  
 * 7Ô∏è‚É£ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ / –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ  
 */
esp_err_t vault_backup(const char *tar_path);
esp_err_t vault_restore(const char *tar_path);

/**  
 * 8Ô∏è‚É£ –ú–µ—Ç—Ä–∏–∫–∏  
 */
esp_err_t vault_get_metrics(vault_metrics_t *metrics);

/**  
 * 9Ô∏è‚É£ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è c NVS (–¥–ª—è small blobs)  
 *    ‚Äì threshold –∑–∞–¥–∞—ë—Ç—Å—è –≤ sdkconfig: VAULT_NVS_THRESHOLD  
 */

/**  
 * üîü –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏  
 */
esp_err_t vault_set_temporary_async(const char *key, const void *data, size_t size,
                                    uint32_t ttl_ms, vault_async_cb_t cb, void *ctx);
esp_err_t vault_get_persistent_async(const char *key, void *buf, size_t buf_size,
                                     vault_async_cb_t cb, void *ctx);

#ifdef __cplusplus
}
#endif
